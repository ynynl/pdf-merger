{"version":3,"sources":["components/Thumbnail/index.js","components/Topbar/index.js","components/PdfView/index.js","helper/pdf-thumbnails-generator.js","components/FileInput/index.js","components/Right/index.js","App.js","index.js"],"names":["Thumbnail","imgsrc","pageId","handleDelete","className","size","onClick","src","width","alt","Topbar","props","children","Sortable","mount","MultiDrag","PdfView","file","fileId","updateList","updateCheck","useState","list","setList","checked","setChecked","useEffect","initList","map","f","id","page","updatedList","filter","l","pages","from","style","display","defaultSize","height","maxWidth","minWidth","handleClasses","right","enable","top","bottom","left","topRight","bottomRight","bottomLeft","topLeft","onChange","e","target","labelPlacement","LABEL_PLACEMENT","multiDrag","group","animation","delayOnTouchStart","delay","selectedClass","ghostClass","swapThreshold","onSort","item","thumbnail","pdfjsLib","workerSrc","makeThumbnail","scale","getViewport","scaledViewport","canvas","document","createElement","render","canvasContext","getContext","viewport","promise","then","toDataURL","catch","error","console","generatePdfThumbnails","source","a","url","pdfDocument","log","pageNum","Array","length","numPages","x","i","Promise","all","num","getPage","FileInput","handlefile","React","isUploading","setIsUploading","timeoutId","reset","clearTimeout","current","multiple","accept","onCancel","onDrop","acceptedFiles","rejectedFiles","progressMessage","Right","handleSave","loaded","App","pdfList","setPdfList","srcPdfDoc","setSrcPdfDoc","workingList","setWorkingList","initSave","p","newSate","update","files","thumbnailTasks","sourceFileTasks","readFileDataAsBase64","doc","push","PDFDocument","load","srcFiles","thumbnailsList","concat","create","pdfDoc","j","copyPages","srcPage","addPage","save","pdfBytes","download","resolve","reject","reader","FileReader","onload","event","result","onerror","err","readAsDataURL","engine","Styletron","ReactDOM","StrictMode","value","theme","LightTheme","getElementById"],"mappings":"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","file":"static/js/main.59106953.chunk.js","sourcesContent":["import './style.scss';\nimport DeleteAlt from 'baseui/icon/delete-alt'\n\nconst Thumbnail = ({ imgsrc, pageId, handleDelete }) => {\n\n    return (\n        <div className='page-card grid-item'>\n            <div className='delete'>\n                <DeleteAlt size={24}  onClick={()=> handleDelete(pageId)}/>\n            </div>\n            <img src={imgsrc} width={'100%'} alt='' />\n        </div>\n    )\n}\n\nexport default Thumbnail","import './style.scss'\n\n\n\nconst Topbar = (props) => {\n    return (\n        <div className='topbar'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Topbar","// import { Document, Page, pdfjs } from \"react-pdf\";\n\nimport React, { useState, useEffect } from 'react';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { Sortable, MultiDrag } from \"sortablejs\"\n// import { GridList, GridListTile, Paper } from '@material-ui/core';\n// https://www.npmjs.com/package/re-resizable#props\nimport { Resizable } from \"re-resizable\";\nimport './style.scss'\n\nimport Thumbnail from '../Thumbnail/index'\nimport Topbar from '../Topbar';\n\nimport {\n  Checkbox,\n  LABEL_PLACEMENT\n} from \"baseui/checkbox\";\n\nSortable.mount(new MultiDrag());\n\n// var _ = require('lodash');\n\nconst PdfView = ({ file, fileId, updateList, updateCheck }) => {\n  const [list, setList] = useState([])\n  const [checked, setChecked] = useState(true);\n\n  useEffect(() => {\n    const initList = file.map(f => {\n      return {\n        ...f,\n        id: `${fileId}-${f.page - 1}`,\n        file: fileId\n      }\n    })\n    setList(initList)\n\n\n  }, [file, fileId])\n\n\n  const style = {\n    display: \"flex\",\n  };\n\n  const handleCheck = (e) => {\n    setChecked(e.target.checked)\n    updateCheck(fileId)\n  }\n\n  const handleUpdate = () => {\n    updateList({ id: fileId, pages: list.map(l => { return { from: l.file, page: l.page - 1 } }), checked: checked }, fileId)\n  }\n\n  const handleDelete = (id) => {\n    const updatedList = list.filter(l => l.id !== id)\n    setList(updatedList)\n    updateList({ id: fileId, pages: updatedList.map(l => { return { from: l.file, page: l.page - 1 } }), checked: checked }, fileId)\n\n  }\n\n  return (\n    <div className='doc'>\n      <Resizable\n        style={style}\n        defaultSize={{ width: '200', height: '100vh' }}\n        maxWidth='600'\n        minWidth='150'\n        handleClasses={{ right: 'handle' }}\n        enable={{ top: false, right: true, bottom: false, left: false, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false }}\n      >\n        <Topbar>\n          <Checkbox\n            checked={checked}\n            onChange={handleCheck}\n            labelPlacement={LABEL_PLACEMENT.right}\n          />\n        </Topbar>\n\n        <div className='pages'>\n          <ReactSortable\n            multiDrag\n            list={list}\n            setList={setList}\n            group=\"groupName\"\n            animation={200}\n            delayOnTouchStart={true}\n            delay={2}\n            selectedClass='selected'\n            ghostClass='selected'\n            swapThreshold={0.5}\n            className='grid-container'\n            onSort={handleUpdate}\n          >\n            {list.map((item) => (\n              <Thumbnail\n                key={item.id}\n                imgsrc={item.thumbnail}\n                pageId={item.id}\n                handleDelete={handleDelete}\n              />\n            ))}\n          </ReactSortable>\n        </div>\n      </Resizable>\n    </div>\n  )\n}\n\nexport default PdfView","import * as pdfjsLib from 'pdfjs-dist';\npdfjsLib.GlobalWorkerOptions.workerSrc =\n  `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.js`;\n\n/**\n * @param  {Object} page\n * @param  {Number} size\n * @return {String}\n */\nconst makeThumbnail = (page, size) => {\n  // draw page to fit into input size canvas\n  const desiredWidth = size;\n  const viewPort = page.getViewport({ scale: 1 });\n\n  const scale = desiredWidth / viewPort.width;\n  const scaledViewport = page.getViewport({ scale: scale });\n\n  const canvas = document.createElement(\"canvas\");\n  canvas.height = scaledViewport.height;\n  canvas.width = scaledViewport.width;\n\n  return page\n    .render({\n      canvasContext: canvas.getContext(\"2d\"),\n      viewport: scaledViewport,\n    })\n    .promise.then(function () {\n      return canvas.toDataURL();\n    })\n    .catch(error => console.error(error));\n};\n\n/**\n * @param  {String} source\n * @param  {Number} size\n * @return {Array}\n */\nexport const generatePdfThumbnails = async (source, size) => {\n\n  try {\n    const pdfDocument = await pdfjsLib.getDocument({ url: source, }).promise\n\n    console.log('PDF loaded');\n\n    const pageNum = Array.from({ length: pdfDocument.numPages }, (x, i) => i + 1);\n\n    return Promise.all(\n      pageNum.map((num) =>\n        pdfDocument\n          .getPage(num)\n          .then((page) => makeThumbnail(page, size))\n          .then((thumbnail) => ({\n            page: num,\n            thumbnail,\n          }))\n      )\n    );\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n\nexport default generatePdfThumbnails;","import './style.scss'\n\nimport * as React from 'react';\nimport { FileUploader } from 'baseui/file-uploader';\n\n\nexport default function FileInput({ handlefile }) {\n    const [isUploading, setIsUploading] = React.useState(false);\n    const timeoutId = React.useRef(null);\n    function reset() {\n        setIsUploading(false);\n        clearTimeout(timeoutId.current);\n    }\n    // startProgress is only illustrative. Use the progress info returned\n    // from your upload endpoint. This example shows how the file-uploader operates\n    // if there is no progress info available.\n    function startProgress() {\n        setIsUploading(true);\n        timeoutId.current = setTimeout(reset, 4000);\n    }\n    return (\n        <div className='container'>\n            <div >\n                <FileUploader\n                    className='uploader'\n                    multiple\n                    accept='application/pdf'\n                    onCancel={reset}\n                    onDrop={(acceptedFiles, rejectedFiles) => {\n                        // handle file upload...\n                        // startProgress();\n                        handlefile(acceptedFiles)\n                    }}\n                    progressMessage={\n                        isUploading ? `Uploading... hang tight.` : ''\n                    }\n                />\n            </div>\n        </div>\n    );\n}","import Topbar from \"../Topbar/index\"\nimport './style.scss'\n\nimport * as React from 'react';\n\nimport FileInput from \"../FileInput\";\nimport { Button } from \"baseui/button\";\nimport { H1, H2, H3, H4, H5, H6 } from 'baseui/typography';\n\n\nexport default function Right({ handlefile, handleSave, loaded }) {\n  // startProgress is only illustrative. Use the progress info returned\n  // from your upload endpoint. This example shows how the file-uploader operates\n  // if there is no progress info available.\n  return (\n    <div className='container'>\n      <Topbar></Topbar>\n      <div className='input'>\n\n        <H5>\n          Arrange & Combine PDF (severless)\n        </H5>\n        \n        <div>\n          <FileInput handlefile={handlefile} />\n          {/* <Controller /> */}\n        </div>\n        {loaded &&\n          <div className='button'>\n            <Button onClick={handleSave}>SAVE</Button>\n          </div>\n        }\n      </div>\n    </div>\n  );\n}","import './App.scss';\nimport React, { useState, useEffect } from 'react';\nimport PdfView from './components/PdfView/index';\nimport { PDFDocument } from 'pdf-lib'\nimport download from 'downloadjs'\nimport generatePdfThumbnails from './helper/pdf-thumbnails-generator';\nimport Right from './components/Right/index';\n\n\n\nfunction App() {\n  const [pdfList, setPdfList] = useState([]);\n  const [srcPdfDoc, setSrcPdfDoc] = useState([])\n  const [workingList, setWorkingList] = useState([])\n\n  useEffect(() => {\n    const initSave = pdfList.map((pages, i) => (i > workingList.length - 1)\n      ? { id: i, pages: pages.map(p => { return { from: i, page: p.page - 1 } }), checked: true }\n      : workingList[i])\n    setWorkingList(initSave)\n  }, [pdfList])\n\n  /**\n   * \n   * @param {object} newSate \n   * @param {number} id \n   */\n  const updateList = (newSate, id) => {\n    const update = workingList.map(l => (l.id === id) ? newSate : l)\n    setWorkingList(update)\n  }\n\n  const updateCheck = (id) => {\n    const update = workingList.map(l => (l.id === id) ? { ...l, checked: !l.checked } : l)\n    setWorkingList(update)\n  }\n\n  const handlefile = async (files) => {\n    try {\n      const thumbnailTasks = []\n      const sourceFileTasks = []\n\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i]\n        const doc = await readFileDataAsBase64(file)\n        sourceFileTasks.push(\n          PDFDocument.load(doc)\n        )\n        thumbnailTasks.push(\n          generatePdfThumbnails(doc, 600)\n        )\n      }\n\n      const srcFiles = await Promise.all(sourceFileTasks)\n      const thumbnailsList = await Promise.all(thumbnailTasks)\n\n      setSrcPdfDoc(srcPdfDoc.concat(srcFiles))\n      setPdfList(pdfList.concat(thumbnailsList))\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleSave = async () => {\n\n    const pdfDoc = await PDFDocument.create()\n    // console.log(pdfDoc);\n\n    for (let i = 0; i < workingList.length; i++) {\n      if (workingList[i].checked) {\n        const pages = workingList[i].pages\n        console.log('save', pages);\n        for (let j = 0; j < pages.length; j++) {\n          const p = pages[j]\n          const [srcPage] = await pdfDoc.copyPages(srcPdfDoc[p.from], [p.page])\n          pdfDoc.addPage(srcPage)\n        }\n      }\n    }\n    const pdfBytes = await pdfDoc.save()\n    download(pdfBytes, \"mergedPDF.pdf\", \"application/pdf\");\n  }\n\n  function readFileDataAsBase64(file) {\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = (event) => {\n        resolve(event.target.result);\n      };\n\n      reader.onerror = (err) => {\n        reject(err);\n      };\n\n      reader.readAsDataURL(file);\n    });\n  }\n\n\n  return (\n    <div className='App'>\n      {pdfList.map((f, i) => {\n        return <PdfView\n          className='row'\n          key={i}\n          fileId={i}\n          file={f}\n          updateList={updateList}\n          updateCheck={updateCheck}\n        />\n      })}\n\n      <Right className='row' handlefile={handlefile} handleSave={handleSave} loaded={!!workingList.length} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { LightTheme, BaseProvider } from 'baseui';\nconst engine = new Styletron();\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <App />\n      </BaseProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}